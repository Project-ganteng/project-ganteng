import React, { useState, useEffect } from 'react';
import { aiAPI } from '../utils/api';
import { useSocket } from '../context/SocketContext';
import { useToast } from '../context/ToastContext';
import { useAuth } from '../context/AuthContext';

const SummaryPanel = ({ roomId, roomName }) => {
  const [summary, setSummary] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { lastSummary } = useSocket();
  const { success, error: showError } = useToast();
  const { user } = useAuth();

  // Listen for real-time AI summary updates
  useEffect(() => {
    if (lastSummary && lastSummary.roomId === roomId) {
      setSummary(lastSummary.summary);
      setError('');
      
      const currentUsername = user?.email?.split('@')[0];
      if (lastSummary.generatedBy === currentUsername) {
        // User generated it themselves
        success('🎉 AI Summary generated successfully!');
      } else {
        // Someone else generated it
        success(`🤖 AI Summary generated by ${lastSummary.generatedBy}`);
      }
    }
  }, [lastSummary, roomId]); // Remove success from dependencies

  const generateSummary = async () => {
    setLoading(true);
    setError('');

    try {
      const response = await aiAPI.generateSummary(roomId);
      if (response.data.success) {
        setSummary(response.data.summary);
        // Don't show toast here - will be handled by useEffect when socket emits
      } else {
        throw new Error(response.data.message || 'Failed to generate summary');
      }
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Failed to generate summary';
      setError(errorMessage);
      showError(`❌ ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const downloadSummary = () => {
    if (summary) {
      const blob = new Blob([`Meeting Summary - ${roomName}\n\n${summary}`], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `meeting-summary-${roomName}-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      success('📥 Summary downloaded successfully!');
    }
  };

  const copySummary = async () => {
    if (summary) {
      try {
        await navigator.clipboard.writeText(summary);
        success('📋 Summary copied to clipboard!');
      } catch (err) {
        showError('Failed to copy summary');
      }
    }
  };

  return (
    <div className="bg-white border-l border-gray-200 w-80 flex flex-col shadow-lg">
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
        <div className="flex items-center mb-2">
          <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
            </svg>
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">AI Meeting Summary</h3>
            <p className="text-sm text-gray-600">{roomName}</p>
          </div>
        </div>
      </div>

      <div className="flex-1 p-6 overflow-y-auto">
        {!summary && !loading && (
          <div className="text-center">
            <div className="mb-6">
              <div className="w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h4 className="text-lg font-medium text-gray-900 mb-2">Generate AI Summary</h4>
              <p className="text-sm text-gray-500 mb-6">
                Create an intelligent summary of this meeting's conversation using AI
              </p>
            </div>
            
            <button
              onClick={generateSummary}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-4 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-medium flex items-center justify-center space-x-2 shadow-md"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              <span>Generate Summary</span>
            </button>
          </div>
        )}

        {loading && (
          <div className="text-center py-8">
            <div className="relative">
              <div className="w-16 h-16 mx-auto mb-4">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600"></div>
              </div>
              <div className="mb-4">
                <div className="flex justify-center space-x-1">
                  <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
              <p className="text-sm text-gray-600 font-medium">AI is analyzing the conversation...</p>
              <p className="text-xs text-gray-500 mt-2">This may take a few moments</p>
            </div>
          </div>
        )}

        {error && (
          <div className="text-center py-6">
            <div className="w-16 h-16 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-4">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.866-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <div className="text-red-600 text-sm mb-4 font-medium">{error}</div>
            <button
              onClick={generateSummary}
              className="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 text-sm font-medium"
            >
              Try Again
            </button>
          </div>
        )}

        {summary && (
          <div className="space-y-4">
            {/* Action buttons */}
            <div className="flex space-x-2 mb-4">
              <button
                onClick={generateSummary}
                disabled={loading}
                className="flex-1 bg-blue-600 text-white py-2 px-3 rounded-lg hover:bg-blue-700 text-sm font-medium disabled:opacity-50 flex items-center justify-center space-x-1"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <span>Refresh</span>
              </button>
              
              <button
                onClick={copySummary}
                className="bg-gray-100 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-200 text-sm font-medium flex items-center justify-center"
                title="Copy to clipboard"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              </button>
              
              <button
                onClick={downloadSummary}
                className="bg-gray-100 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-200 text-sm font-medium flex items-center justify-center"
                title="Download summary"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </button>
            </div>

            {/* Summary content */}
            <div className="bg-gradient-to-br from-gray-50 to-blue-50 p-4 rounded-lg border border-gray-200">
              <div className="prose prose-sm max-w-none">
                <div className="whitespace-pre-wrap text-sm text-gray-800 leading-relaxed">
                  {summary}
                </div>
              </div>
            </div>

            {/* Timestamp */}
            <div className="text-xs text-gray-500 text-center">
              Generated at {new Date().toLocaleString()}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SummaryPanel;
